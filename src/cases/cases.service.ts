import {
  ForbiddenException,
  Injectable,
  NotFoundException,
  BadRequestException,
  OnModuleInit,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Case, CaseDocument } from './schemas/case.schema';
import { Model, isValidObjectId } from 'mongoose';

type CaseStatus = 'draft' | 'published';

/** –û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∫–µ–π—Å–∞ (–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤) */
interface CoverImage {
  type: 'image';
  url: string;
  alt?: string;
  /** –î–æ–∑–≤–æ–ª—è—î–º–æ –∞–±–æ –ø—Ä–æ—Å—Ç–∏–π —Ä—è–¥–æ–∫-URL, –∞–±–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–±‚Äô—î–∫—Ç */
  sizes?: Record<
    string,
    | string
    | {
        url: string;
        width?: number;
        height?: number;
        [k: string]: unknown;
      }
  >;
}

/** –°—Ç–∞—Ç—É—Å–∏ –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É –≤—ñ–¥–µ–æ */
type VideoStatus = 'queued' | 'uploading' | 'processing' | 'ready' | 'error';

/** –ú–µ—Ç–∞–¥–∞–Ω—ñ –≤—ñ–¥–µ–æ, —â–æ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —É –¥–æ–∫—É–º–µ–Ω—Ç—ñ */
interface VideoMeta {
  vimeoId?: string; // –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–∞ —Ä–∞–Ω–Ω—ñ—Ö –µ—Ç–∞–ø–∞—Ö
  status: VideoStatus;
  playbackUrl?: string;
  thumbnailUrl?: string;
  [k: string]: unknown;
}

/** –ü–µ–π–ª–æ–∞–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É —É –º–∞—Å–∏–≤—ñ videos */
type NewVideoMeta = {
  status: VideoStatus;
  vimeoId?: string; // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ª–∏—à–µ –¥–ª—è –ø—ñ–∑–Ω—ñ—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
  playbackUrl?: string;
  thumbnailUrl?: string;
  [k: string]: unknown;
};

interface CreateCaseDto {
  title: string;
  description?: string;
  status?: CaseStatus;
  tags?: string[];
  categories?: string[];
  industry?: string;
}

interface UpdateCaseDto {
  title?: string;
  description?: string;
  status?: CaseStatus;
  tags?: string[];
  categories?: string[];
  industry?: string;
  // cover/videos –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
}

// ===== helpers =====
const ALLOWED_STATUS: CaseStatus[] = ['draft', 'published'];

/** –ü—Ä–∏–≤–æ–¥–∏—Ç—å –º–∞—Å–∏–≤ –±—É–¥—å-—á–æ–≥–æ –¥–æ –º–∞—Å–∏–≤—É —Ä—è–¥–∫—ñ–≤: trim, toLowerCase, –±–µ–∑ –ø—É—Å—Ç–∏—Ö, —É–Ω—ñ–∫–∞–ª—å–Ω—ñ, –∑—Ä—ñ–∑ –∑–∞ –ª—ñ–º—ñ—Ç–æ–º */
function normalizeStringArray(
  input: unknown,
  limit: number,
  { toLower = true }: { toLower?: boolean } = { toLower: true },
): string[] {
  if (!Array.isArray(input)) return [];
  const out: string[] = [];
  for (const v of input) {
    if (typeof v !== 'string') continue;
    let s = v.trim();
    if (!s) continue;
    if (toLower) s = s.toLowerCase();
    if (!out.includes(s)) out.push(s);
    if (out.length >= limit) break;
  }
  return out;
}

/** –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ Mongo ObjectId */
function ensureObjectId(id: string, fieldName = 'id') {
  if (!isValidObjectId(id)) {
    throw new BadRequestException(`${fieldName} is not a valid ObjectId`);
  }
}

/** –û—á–∏—Å—Ç–∫–∞/–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è payload –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–µ–π—Å–∞ */
function sanitizeCreateDto(
  dto: CreateCaseDto,
): {
  title: string;
  description: string;
  status: CaseStatus;
  tags: string[];
  categories: string[];
  industry?: string; // –æ–ø—Ü—ñ–π–Ω–µ
} {
  const title = (dto.title ?? '').toString().trim();
  if (!title) throw new BadRequestException('title is required');

  const description = (dto.description ?? '').toString();
  const status = (dto.status ?? 'draft') as CaseStatus;
  if (!ALLOWED_STATUS.includes(status)) {
    throw new BadRequestException(`status must be one of: ${ALLOWED_STATUS.join(', ')}`);
  }

  const tags = normalizeStringArray(dto.tags, 20);
  const categories = normalizeStringArray(dto.categories, 3);
  const industry = dto.industry ? dto.industry.toString().trim() : undefined;

  return { title, description, status, tags, categories, industry };
}

/** –û—á–∏—Å—Ç–∫–∞/–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è patch –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ–π—Å–∞ */
function sanitizeUpdateDto(patch: UpdateCaseDto): UpdateCaseDto {
  const allowed: UpdateCaseDto = {};
  if (typeof patch.title === 'string') {
    const t = patch.title.trim();
    if (!t) throw new BadRequestException('title must be non-empty string');
    allowed.title = t;
  }
  if (typeof patch.description === 'string') {
    allowed.description = patch.description;
  }
  if (typeof patch.status === 'string') {
    if (!ALLOWED_STATUS.includes(patch.status as CaseStatus)) {
      throw new BadRequestException(`status must be one of: ${ALLOWED_STATUS.join(', ')}`);
    }
    allowed.status = patch.status as CaseStatus;
  }
  if (patch.tags !== undefined) {
    allowed.tags = normalizeStringArray(patch.tags, 20);
  }
  if (patch.categories !== undefined) {
    allowed.categories = normalizeStringArray(patch.categories, 3);
  }
  if (patch.industry !== undefined) {
    allowed.industry = typeof patch.industry === 'string' ? patch.industry.trim() : undefined;
  }
  return allowed;
}

@Injectable()
export class CasesService implements OnModuleInit {
  constructor(@InjectModel(Case.name) private caseModel: Model<CaseDocument>) {}

  /** –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∑—ñ —Å—Ö–µ–º–∏ (—Ä–∞–∑–æ–≤–æ) */
  async onModuleInit() {
    try {
      await this.caseModel.syncIndexes();
    } catch {
      // –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è run-time
    }
  }

  async create(ownerId: string, dto: CreateCaseDto) {
    if (!ownerId) throw new ForbiddenException('ownerId required');
    const clean = sanitizeCreateDto(dto);
    const doc = await this.caseModel.create({ ...clean, ownerId });
    return doc;
  }

  /** –ü—É–±–ª—ñ—á–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –º–æ–∂–µ—à —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –ª–∏—à–µ published) */
  async findPublicById(id: string) {
    ensureObjectId(id);
    const doc = await this.caseModel.findById(id).lean();
    if (!doc) throw new NotFoundException('Case not found');
    return doc;
  }

  async updateOwned(userId: string, id: string, patch: UpdateCaseDto) {
    ensureObjectId(id);
    const doc = await this.caseModel.findById(id);
    if (!doc) throw new NotFoundException('Case not found');

    // –∑–∞–±–æ—Ä–æ–Ω—è—î–º–æ –∑–º—ñ–Ω—É –≤–ª–∞—Å–Ω–∏–∫–∞
    if (String(doc.ownerId) !== String(userId)) {
      throw new ForbiddenException('Not owner');
    }

    // ¬´–±—ñ–ª–∏–π —Å–ø–∏—Å–æ–∫¬ª –ø–æ–ª—ñ–≤
    const allowed = sanitizeUpdateDto(patch);
    Object.assign(doc, allowed);
    await doc.save(); // –≤–∏–∫–ª–∏–∫–∞—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å—Ö–µ–º–∏
    return doc;
  }

  async setCover(userId: string, id: string, cover: CoverImage) {
    ensureObjectId(id);
    const doc = await this.caseModel.findById(id);
    if (!doc) throw new NotFoundException('Case not found');
    if (String(doc.ownerId) !== String(userId)) throw new ForbiddenException('Not owner');

    // –±–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ cover
    if (
      !cover ||
      typeof cover !== 'object' ||
      cover.type !== 'image' ||
      typeof cover.url !== 'string' ||
      !cover.url.trim()
    ) {
      throw new BadRequestException('Invalid cover payload');
    }

    // üîß –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è sizes: –¥–æ–∑–≤–æ–ª—è—î–º–æ —è–∫ { key: "url" }, —Ç–∞–∫ —ñ { key: { url, ... } }
    if (cover.sizes && typeof cover.sizes === 'object') {
      const normalized: NonNullable<CoverImage['sizes']> = {};
      for (const [key, val] of Object.entries(cover.sizes)) {
        if (typeof val === 'string') {
          if (!val.trim()) continue;
          normalized[key] = { url: val.trim() };
        } else if (
          val &&
          typeof val === 'object' &&
          typeof (val as any).url === 'string' &&
          (val as any).url.trim()
        ) {
          normalized[key] = { ...(val as any), url: (val as any).url.trim() };
        } else {
          // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
          continue;
        }
      }
      cover = { ...cover, sizes: normalized };
    }

    doc.cover = cover;
    await doc.save();
    return doc;
  }

  /**
   * –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —É –º–∞—Å–∏–≤ videos.
   * –î–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤ 'processing' | 'ready' ‚Äî –≤–∏–º–∞–≥–∞—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å vimeoId.
   * –î–ª—è 'queued' | 'uploading' ‚Äî vimeoId –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.
   */
  async pushVideoMeta(caseId: string, meta: NewVideoMeta) {
    ensureObjectId(caseId, 'caseId');

    if (!meta || typeof meta !== 'object') {
      throw new BadRequestException('Invalid video meta');
    }
    if (!meta.status) {
      throw new BadRequestException('meta.status is required');
    }
    const needsVimeoId = meta.status === 'processing' || meta.status === 'ready';
    if (needsVimeoId && (!meta.vimeoId || !meta.vimeoId.trim())) {
      throw new BadRequestException('meta.vimeoId is required for this status');
    }

    return this.caseModel.findByIdAndUpdate(
      caseId,
      { $push: { videos: meta as VideoMeta } },
      { new: true, runValidators: true },
    );
  }

  async updateVideoStatus(caseId: string, vimeoId: string, patch: Partial<VideoMeta>) {
    ensureObjectId(caseId, 'caseId');
    if (!vimeoId) throw new BadRequestException('vimeoId required');
    if (!patch || typeof patch !== 'object') {
      throw new BadRequestException('Invalid patch');
    }

    const $set: Record<string, unknown> = {};
    if (patch.status) $set['videos.$.status'] = patch.status;
    if (patch.playbackUrl) $set['videos.$.playbackUrl'] = patch.playbackUrl;
    if (patch.thumbnailUrl) $set['videos.$.thumbnailUrl'] = patch.thumbnailUrl;

    if (Object.keys($set).length === 0) {
      throw new BadRequestException('Nothing to update');
    }

    return this.caseModel.updateOne(
      { _id: caseId, 'videos.vimeoId': vimeoId },
      { $set },
      { runValidators: true },
    );
  }

  //  NEW: –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ –∑–∞ vimeoId –±–µ–∑ –∑–Ω–∞–Ω–Ω—è caseId (–¥–ª—è –≤–µ–±—Ö—É–∫–∞)
  async updateVideoStatusByVimeoId(
    vimeoId: string,
    patch: { status: VideoStatus | string; playbackUrl?: string; thumbnailUrl?: string },
  ) {
    if (!vimeoId || !vimeoId.trim()) {
      throw new BadRequestException('vimeoId required');
    }
    const $set: Record<string, unknown> = {};
    if (patch.status) $set['videos.$.status'] = patch.status;
    if (patch.playbackUrl) $set['videos.$.playbackUrl'] = patch.playbackUrl;
    if (patch.thumbnailUrl) $set['videos.$.thumbnailUrl'] = patch.thumbnailUrl;

 $set['videos.$.vimeoId'] = vimeoId;

    if (Object.keys($set).length === 0) {
      throw new BadRequestException('Nothing to update');
    }

    return this.caseModel.updateOne(
      { 'videos.vimeoId': vimeoId },
      { $set },
      { runValidators: true },
    );
  }

  // === sync helpers (–≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –≤–æ—Ä–∫–µ—Ä–æ–º) ===

  /**
   * –°–∏–Ω—Ö —ñ–∑ —Ç—ñ—î—ó –∂ Mongo (–Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–µ —ñ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó).
   * –ü—ñ–¥—Ç—è–≥—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —ñ –≤–∏–∫–æ–Ω—É—î–º–æ –±—ñ–∑–Ω–µ—Å-–¥—ñ—ó
   * (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤/–∫–µ—à—ñ–≤/–æ–±—á–∏—Å–ª—é–≤–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤ —Ç–æ—â–æ).
   */
  public async syncFromMongo(id: string): Promise<void> {
    ensureObjectId(id);
    const doc = await this.caseModel.findById(id).lean();
    if (!doc) {
      return; // –∫–µ–π—Å –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ id –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ
    }

    // –ø—Ä–∏–∫–ª–∞–¥ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó/–ø–∞—Ç—á—É
    const patch: Partial<UpdateCaseDto> = {};
    const tags = normalizeStringArray((doc as any).tags, 20);
    const categories = normalizeStringArray((doc as any).categories, 3);
    if (JSON.stringify(tags) !== JSON.stringify((doc as any).tags)) patch.tags = tags;
    if (JSON.stringify(categories) !== JSON.stringify((doc as any).categories)) patch.categories = categories;

    if (Object.keys(patch).length) {
      await this.caseModel.updateOne(
        { _id: id },
        { $set: sanitizeUpdateDto(patch) },
        { runValidators: true },
      );
    }
  }

  /**
   * –°–∏–Ω—Ö —ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —á–µ—Ä–µ–∑ Payload REST (—ñ–∑ depth/relations).
   * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π, —è–∫—â–æ —É –≤–æ—Ä–∫–µ—Ä—ñ —Ç—è–≥–Ω–µ—à doc —á–µ—Ä–µ–∑ HTTP (–≤–∞—Ä—ñ–∞–Ω—Ç B).
   */
  public async syncFromPayload(doc: any): Promise<void> {
    if (!doc || !doc.id) return;

    const patch: UpdateCaseDto = {
      title: typeof doc.title === 'string' ? doc.title : undefined,
      description: typeof doc.description === 'string' ? doc.description : undefined,
      status: (doc.status === 'draft' || doc.status === 'published') ? doc.status : undefined,
      industry: typeof doc.industry === 'string' ? doc.industry : undefined,
      // —É —Ç–≤–æ—ó–π Payload-–∫–æ–ª–µ–∫—Ü—ñ—ó tags/categories ‚Äî –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ { value }
      tags: Array.isArray(doc.tags)
        ? doc.tags.map((t: any) => (typeof t?.value === 'string' ? t.value : null)).filter(Boolean)
        : undefined,
      categories: Array.isArray(doc.categories)
        ? doc.categories.map((c: any) => (typeof c?.value === 'string' ? c.value : null)).filter(Boolean)
        : undefined,
    };

    const clean = sanitizeUpdateDto(patch);
    const $set: Record<string, unknown> = { ...clean };

    if (doc.cover && typeof doc.cover === 'object') {
      $set['cover'] = {
        type: 'image',
        url: doc.cover?.url ?? '',
        alt: doc.cover?.alt,
        sizes: doc.cover?.sizes ?? undefined,
      };
    }

    if (Array.isArray(doc.videos)) {
      // –æ—á—ñ–∫—É—î–º–æ –ø–æ–ª—è { provider, externalId, status, url }
      $set['videos'] = doc.videos.map((v: any) => ({
        vimeoId: typeof v?.externalId === 'string' ? v.externalId : undefined,
        status: typeof v?.status === 'string' ? v.status : 'queued',
        playbackUrl: typeof v?.url === 'string' ? v.url : undefined,
      })) as any[];
    }

    await this.caseModel.updateOne(
      { _id: doc.id },
      { $set },
      { runValidators: true },
    );
  }

  
}
